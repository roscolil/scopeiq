export interface ChatMessage {
  id: string
  type: 'user' | 'ai'
  content: string
  timestamp: Date
  query?: string
}

export interface EmailOptions {
  includeTimestamps?: boolean
  subject?: string
  recipientEmail?: string
}

/**
 * Format chat conversation for mobile-optimized sharing
 * Includes emojis and mobile-friendly formatting
 */
export function formatChatForSharing(
  messages: ChatMessage[],
  includeTimestamps: boolean = true,
): string {
  const header = `🔍 ScopeIQ Chat Conversation
📅 ${new Date().toLocaleDateString()}
💬 ${messages.length} messages

${'-'.repeat(40)}

`

  const formattedMessages = messages
    .map(message => {
      const timestamp = includeTimestamps
        ? ` • ${message.timestamp.toLocaleTimeString()}`
        : ''

      const icon = message.type === 'user' ? '👤' : '🤖'
      const label = message.type === 'user' ? 'You' : 'AI Assistant'

      return `${icon} ${label}${timestamp}
${message.content}

`
    })
    .join('')

  const footer = `${'-'.repeat(40)}

Generated by ScopeIQ AI Assistant
Mobile-optimized conversation export`

  return header + formattedMessages + footer
}

/**
 * Download chat conversation as text file
 * Mobile-optimized: opens in new tab on mobile, downloads on desktop
 */
export function downloadChatConversation(
  messages: ChatMessage[],
  includeTimestamps: boolean = true,
): void {
  const content = formatChatForSharing(messages, includeTimestamps)
  const filename = `scopeiq-chat-${new Date().toISOString().split('T')[0]}.txt`

  // Create blob and URL
  const blob = new Blob([content], { type: 'text/plain' })
  const url = URL.createObjectURL(blob)

  // Detect mobile device
  const isMobile =
    /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(
      navigator.userAgent,
    )

  if (isMobile) {
    // On mobile, open in new tab for easier sharing
    const newWindow = window.open()
    if (newWindow) {
      newWindow.document.write(`
        <html>
          <head>
            <title>ScopeIQ Chat Export</title>
            <meta name="viewport" content="width=device-width, initial-scale=1">
            <style>
              body { 
                font-family: monospace; 
                padding: 20px; 
                white-space: pre-wrap; 
                line-height: 1.5;
                font-size: 14px;
              }
              .header {
                background: #f5f5f5;
                padding: 15px;
                border-radius: 8px;
                margin-bottom: 20px;
              }
            </style>
          </head>
          <body>
            <div class="header">
              <strong>ScopeIQ Chat Conversation</strong><br>
              Tap and hold to select all text, then copy/share
            </div>
            ${content.replace(/\n/g, '<br>')}
          </body>
        </html>
      `)
      newWindow.document.close()
    }
  } else {
    // On desktop, trigger download
    const link = document.createElement('a')
    link.href = url
    link.download = filename
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
  }

  // Clean up
  setTimeout(() => URL.revokeObjectURL(url), 1000)
}

/**
 * Open email client with pre-formatted chat conversation
 * Mobile-optimized mailto handling
 */
export function emailChatConversation(
  messages: ChatMessage[],
  options: EmailOptions = {},
): void {
  const {
    includeTimestamps = true,
    subject = `ScopeIQ Chat Conversation - ${new Date().toLocaleDateString()}`,
    recipientEmail = '',
  } = options

  const content = formatChatForSharing(messages, includeTimestamps)

  // URL encode the content for mailto
  const encodedSubject = encodeURIComponent(subject)
  const encodedBody = encodeURIComponent(content)
  const encodedRecipient = recipientEmail
    ? encodeURIComponent(recipientEmail)
    : ''

  // Create mailto URL
  const mailtoUrl = `mailto:${encodedRecipient}?subject=${encodedSubject}&body=${encodedBody}`

  // Open email client
  window.location.href = mailtoUrl
}

/**
 * Use Web Share API for native mobile sharing (if available)
 * Returns true if sharing was attempted, false if not available
 */
export async function shareChatConversation(
  messages: ChatMessage[],
  includeTimestamps: boolean = true,
): Promise<boolean> {
  // Check if Web Share API is available (mainly mobile browsers)
  if (!navigator.share) {
    return false
  }

  try {
    const content = formatChatForSharing(messages, includeTimestamps)

    await navigator.share({
      title: 'ScopeIQ Chat Conversation',
      text: content,
    })

    return true
  } catch (error) {
    // User cancelled or error occurred
    console.log('Share cancelled or failed:', error)
    return false
  }
}
